Logic about resources being required or optional
implement resources and restricted rooms

resources should handle values whenever that becomes available or needed
What if a section or classroom has multiple resources or resource requests of
the same name but different values?
do something about resources having IDs and names; are they both unique? Maybe
we don't need IDs.

Think about what classrooms not to use
section duration constraint is NOT trivial

lunch needs consistency checks, including that the timeslots are sorted
teacher availability dict needs consistency checks
teacher sections teaching needs consistency checks
consistency checks for teacher dict, class section dict, classroom dict,
resources dicts
consistency check that timeslots not span multiple days

better constraint diagonstics

classrooms don't currently account for classes which are already scheduled in
them

complain if timeslots are too short (maybe compare to DELTA_TIME in constants)

save() might want to check to make sure that the lists of teachers don't change
either
save() should update initial states to prevent getting confused by multiple
saves

handle having two classrooms of the same name

need unittests for schedule operations and saving somehow
be able to deal with schedules with multi-scheduled rooms

saving needs better error handling
saving should check constraints as well before saving
saving is probably really slow
saving errors should be more informative

generally try to be robust to single section errors

Logic relating to locked classes
If a class is already scheduled, it should be assigned to the relevant event
make sure classrooms which already have classes in them don't get double-booked
teachers should have list of sections they're teaching

Think more about section scheduling consistency-- it's a consistency check but
should probably also be either logic- or constraint-enforced.

Potentially make a distinction between a required and optional constraint
(required constraint is also reflected in the search logic)
Or, constraints can have a search pruning functionality.

RoomAvailability is required for schedule_section

sanity checks:
more assumption checks

Unittests should include:
Constraints account for classrooms which already have sections in them

